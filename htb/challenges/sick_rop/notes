vuln method has 32 bytes buffer
	
checksec shows that NX bit is set

read 768 into a 32bytes buffer

first we overflow the buffer and copy two return address and frame

when we first return from vuln function, we will be back to vuln again with sycall address in top of the stack

in this attempt we only copy 15 bytes, thus write will return 15 inn rax and we will invoke syscall with 15

this will copy our frame into the registers, now we just use normal stack buffer overflow to get shell


[  0] = { 3,	TD,		SEN(read), "read"},
[  1] = { 3,	TD,		SEN(write), "write"},

read 

	eax = 0x0
	QWORD PTR [rsp+0x8] = address of buff
	QWORD PTR [rsp+0x10] = 0x300

	eax has len  of the input read
	set eax = 0x1
	push that to the top of the stack
	push address of the buffer to stop of the stack
	

	i can overwrite ebp value
	leave does
		mov esp, ebp
		pop ebp
		ret

   0x7ffff7ffd7d7 <gettimeofday+183>:   pop    rbx
   0x7ffff7ffd7d8 <gettimeofday+184>:   pop    r12
   0x7ffff7ffd7da <gettimeofday+186>:   pop    rbp
   0x7ffff7ffd7db <gettimeofday+187>:   ret    
   
   0x7ffff7ffd7ef <gettimeofday+207>:   mov    eax,0x60
   0x7ffff7ffd7f4 <gettimeofday+212>:   mov    rdi,r10
   0x7ffff7ffd7f7 <gettimeofday+215>:   mov    rsi,r11
   0x7ffff7ffd7fa <gettimeofday+218>:   syscall 
   0x7ffff7ffd7fc <gettimeofday+220>:   jmp    0x7ffff7ffd7d7 <gettimeofday+183>

   0x7ffff7ffd6a6:      mov    rax,rdx
   0x7ffff7ffd6a9:      add    rax,rsi
   0x7ffff7ffd6ac:      ret 
   0x000000000040104d <+31>:    leave  
   0x000000000040104e <+32>:    ret

   0x7ffff7ffd65e:      or     rax,rdx
   0x7ffff7ffd661:      ret


   0x7ffff7ffd66c:      mov    rax,0xffffffffffffffff
   0x7ffff7ffd673:      ret
