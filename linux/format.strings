Real family members:
• fprintf — prints to a FILE stream
• printf — prints to the ‘stdout’ stream
• sprintf — prints into a string
• snprintf — prints into a string with length checking
• vfprintf — print to a FILE stream from a va_arg structure
• vprintf — prints to ‘stdout’ from a va_arg structure
• vsprintf — prints to a string from a va_arg structure
• vsnprintf — prints to a string with length checking from a va_arg
structure
Relatives:
• setproctitle — set argv[]
• syslog — output to the syslog facility
• others like err*, verr*, warn*, vwarn*


Wrong usage:
	int func (char *user) {
		printf (user);
	}
Ok:
	int func (char *user)
	{
		printf ("%s", user);
	}

parameter 	output  	           passed as
  %d 	  	decimal 	          (int) value
  %u 	     unsigned decimal             (unsigned int) value
  %x           hexadecimal                (unsigned int) value
  %s           string ((const)            (unsigned) char *) reference
  %n      number of bytes written so far  (* int) reference


%x is converted into 8 bytes, %x -> ffffffff

in x86 paramerters of function is pushed onto the stack from right to left

in x64 paramters leftmost - RCX, second - RDX, third - R8, fourth - r9, fifth & higher - stack

Linux: RDI, RSI, RDX, RCX, R8,  R9, remaining from the stack

Windows: RCX, RDX, RSI, RDI, remaining from the stack

Exploitation:

Through supplying the format string we are able to control the behaviour of the format function. we now have to examine what exactly we are able to control, and how to use this control to extent this partial control over the process to full control of the execution flow.


simple way to make a crash is to send "%s%s%s%s%s%s%s", function call will try to take gibbrish data from stack as memory pointers, thus causing SIGSEGV



